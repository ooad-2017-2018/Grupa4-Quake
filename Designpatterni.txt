1.Singleton pattern
Definicija:Uloga Singleton paterna je da osigura da se klasa može instancirati samo jednom i da osigura
globalni pristup kreiranoj instanci klase. Postoji više objekata koje je potrebno samo jednom
instancirati i nad kojim je potrebna jedinstvena kontrola pristupa. Neki od njih su: thread
pools (skupina niti), objekti koji upravljaju setovanjem registara, objekti koji se koriste za
logiranje, objekti koji se koriste kao drajveri za razne ureðaje kao što su printeri i grafièke
kartice. 
Kako se koriste?
Primjer upotrebe:
-kreiramo klasu koja može imati samo jednu instancu
-Postavljanje privatne vidljivosti za konstruktor i dodavanje privatnog static konstruktora.
-Dodavanje privatnog static read-only objekta koji se interno instancira korištenjem
privatnog konstruktora.
-Dodavanje javno vidljive osobine ( public static property) ili metode koja pristupa
privatnom objektu i instancira ga ako objekat veæ ne postoji.
U našem projektu:
Nije upotrijebljen.
Dobro mjesto za upotrebu:
Tipa ako bi aplikaciju namijenili samo jednoj firmi,onda bi TKlovegame kao glavna klasa trebala da koristi singleton pattern.
2.Prototype pattern 
Definicija:Uloga Prototype paterna je da kreira nove objekte klonirajuæi jednu od postojeæih prototip
instanci (postojeæi objekat). Ako je trošak kreiranja novog objekta velik i kreiranje objekta je
resursno zahtjevno tada se vrši kloniranje veæ postojeæeg objekata. 
Kako se koristi?
Postoje dva naèina implementacije Prototypes paterna: shallow (površinsko) i deep(duboko)
kloniranje (kopiranje). Površinsko kloniranje se u C# izvršava korištenjem
Object.MemberWiseClone metode. MemberwiseClone metoda je raspoloživa za sve
objekte. Kopira sva polja i reference objekta i vraæa referencu na kopiju. Meðutim ne kopira
objekte na koje reference u objektima pokazuju. Sa dubokim kopiranjem/kloniranjem
kopiraju se svi podobjekti. U svrhu implementacije dubokog kopiranja C# koristi
serijalizaciju. 
U našem projektu:
Ne.
Dobro mjesto za upotrebu:
Kloniranje podataka iz baze radi nekog istraživanja i statistike,tipa kloniranje korisnika,terena itd- za izvjestaj o radu firme.
3.Factory Method Pattern 
Definicija:Uloga Factory Method paterna je da omoguæi kreiranje objekata na naèin da podklase odluèe
koju klasu instancirati. Razlièite podklase mogu na razlièite naèine implementirati interfejs.
Factory Method instancira odgovarajuæu podklasu(izvedenu klasu) preko posebne metode na
osnovu informacije od strane klijenta ili na osnovu tekuæeg stanja.
Kako se koristi?
Osnovni elementi Factory Method paterna su: IProduct – interfejs za produkte; ProductA,
ProductB klase koje implementiraju interfejs; Creator klasa posjeduje FactoryMethod()
metodu; FactoryMethod() metoda odluèuje koju klasu instancirati. Klijent može imati više
od jednog kreatora za razlièite tipove produkata. 
U našem projektu?
Ne.
Dobro mjesto za upotrebu?
Kod rezervacije ,u zavisnosti od mišljenja rekreacionog igraca,da se instancira nova klasa Mec.